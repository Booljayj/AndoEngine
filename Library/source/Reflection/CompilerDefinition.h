#include <cstdint>
#include <typeinfo>

namespace Reflection {
	/** Type information that is specified by the compiler */
	struct CompilerDefinition {
		/** The size in bytes of an instance of this type */
		size_t Size = 0;
		/** The alignment in bytes of an instance of this type */
		size_t Alignment = 0;
		/** The standard type_info object for this type */
		std::type_info const& StandardInfo;

		/** Get the mangled name generated by the compiler */
		char const* GetMangledName() const { return StandardInfo.name(); }
	};

	template<typename T>
	constexpr inline CompilerDefinition GetCompilerDefinition() {
		return CompilerDefinition{ sizeof(T), alignof(T), typeid(T) };
	}
	template<>
	constexpr inline CompilerDefinition GetCompilerDefinition<void>() {
		return CompilerDefinition{ 0, 0, typeid(void) };
	}
}
