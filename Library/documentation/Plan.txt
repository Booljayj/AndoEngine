Overall plan

Principles:
- an entity is an individual object in the world

- components are associated with an entity, such that the component belongs to the entity
- components are containers for data

- systems can be associated with certain types of components
- systems can read and/or modify the data in the components they are associated with
- systems cannot access and do not know about components they are not associated with

- systems can be associated with other systems
- systems can read data exposed by the systems they are associated with
- systems cannot modify data on other systems

Traits:
- entities and their components have a well-defined lifetime from creation to destruction
- data in a component can include references to entities
- everything is an entity, and all data are components
- when an entity is loaded, all of its components are loaded
- when an entity is unloaded, all of its components are unloaded
- an entity can exist without being loaded
- entities which exist have an entity ID
- references to other entities are formed by storing an entity ID
- if an entity is not referenced by any other loaded entities, it may be unloaded
- if a referenced entity is used in some way by another loaded entity, it must be loaded first

entity lifecycle:
- construction - the entity ID is registered and can be stored in other entities
- loading - the components for an entity are constructed and may be filled with useful data
- unloading - the components for an entity are deconstructed
- destruction - the entity ID is unregistered and cannot be stored in other entities

component lifecycle:
- construction - the entity this component is a part of was loaded
- deserialization - the component was provided a set of data to use
- serialization - the component exposes all of its data
- destruction - the entity this component is part of was unloaded

ways an entity can exist:
- if it is explicitly created and registered
- if it is an asset that can be loaded from disk

ways an entity can be loaded:
- if it is explicitly loaded
- if a system attempts to retrieve a component from that entity

An example of the composition of an entity:
The entity is made of the following components, which are bundled together to form the entity. The name "Entity" refers to a component that stores entity data, not the entity itself. References to other entities have the type "eID", or entity ID.

eID: {
    Entity:
        - Name : string
    Heirarchy:
        - Parent : eID
        - Children : eID[]
    Transform:
        - WorldMatrix : Mat4x4f
        - LocalMatrix : Mat4x4f
    StaticMeshRenderer:
        - Mesh : eID
        - Materials : eID[]
}

In an ideal world, all systems that write to the Transform component would finish their calculations before any of the systems which read from them are allowed to perform calculations. This is not always possible, so to avoid conflicts there needs to be a way for systems to communicate and coordinate to ensure that the end result of all calculations does not depend on entity order.

Example: world transform calculation within a heirarchy.
Setup 1:
    - TransformSystem reads from Heirarchy, and writes to Transform
Flow:
    When a localMatrix on a transform has changed, recalculate the world transform for the entity and all of its children
Consequences:
    If multiple transforms are changed in the same heirarchy during a frame, many redundant recalculations will occur

Setup 2:
    - HeirarchySystem writes to Heirarchy, and writes to Transform
Flow
    When an entity is reparented, its transform is marked as dirty, causing the transform system to recalculate it
Consequences
    The heirarchy system must be run before the transform system, or transforms will be in a dirty state at the end of the frame. At the end of a frame, all transforms must be in a non-dirty state to ensure that rendering properly reflects the current state of the world.

Setup 3:
    - TransformSystem will simply be run after all systems are complete
Flow:
    All systems are run, then transform system is allowed to run before rendering, which will update world transforms.
Consequences:
    The world transform read during a frame will always be the _previous_ world transform, or the one at the beginning of the frame. The transform component is essentially double-buffered, which may cause some systems to fight when controlling a transform. If one system sets a transform 1m to the left, and another sets it 1m to the right, the order of systems determines which one will be applied. However, when deltas are applied, this behavior changes, and the end results will always be correct. This means deltas are probably the safest way to apply changes to a transform. Safest, but not ideal.
